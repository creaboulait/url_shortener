c
a.errors.messages
a.errors
a = Url.create(long_url:"test")
Url.create(invalid_params)
a.error?
a.errors
a.error
a = post :create, invalid_params
a.errors
a = post :create, invalid_params
post :create, invalid_params
invalid_params
self
this
params
self
Url.all
c
quit
@url.save
@url = Url.new(long_url: params[:url][:long_url], short_url: SecureRandom.base64[0..8])
params[:url][:long_url]
@url = Url.new(long_url: params[:url], short_url: SecureRandom.base64[0..8])
params[:url]
params
quit
Url.new(params[:url])
Url.new(params[:url[)
params[:url]
quit
Url.new(params[:url],short_url: SecureRandom.base64[0..8])
params[:url]
@url = Url.new(params[:url], short_url: SecureRandom.base64[0..8])
params
Url.new(params[:url], short_url: )
Url.new(params[:url])
params[:url]
quit
@url
x
it
lqit
uiqqt
quit
url = Url.new(params[:url])
params[:url]
quit
params[:url]
params
quit
params
quit
Url.retrieve_short_url(proper_long_url)
x.short_url == proper_short_url
x.short_url
x = Url.find_by(long_url: proper_long_url)
Url.find_by(long_url: proper_long_url)
Url.find_by(long_url :proper_long_url)
Url
quit
Url.all
Url.retrieve_short_url(proper_long_url)
c
x.short_url==proper_short_url
x.short_url
x = Url.find_by(long_url: proper_long_url)
Url.find_by(long_url: proper_long_url)
Url.retrieve_short_url(proper_long_url)
proper_short_url
Url.all
exit
c
@url.save
exit
@url.errors.full_messages
@url.save
if @url.save
@url
exit
c
exit
@url.errors.full_messages
c
@url.errors.full_messages
c
exit
@url.errors.full_messages
@url
c
exit
c
@url.errors.full_messages
exit
@url.errors.full_messages
@url.save
@url
url_params
params
exit
c
data
c
data
c
line
exit
Url.last
Url.all
data
n
line
data
n
data
line.gsub(/[(,)]/i, '')
line.gsub(/[(,)]/i, '').chomp
line
